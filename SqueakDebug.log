Warning9 March 2019 1:59:13.839603 pmVM: Win32 - SmalltalkImage: Squeak5.2 [latest update: #18229]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\Private\Open University\Object Oriented\Squeak\Squeak5.2\Squeak5.2\WorkspaceTrusted Dir C:\Private\Open University\Object Oriented\Squeak\Squeak5.2\Squeak5.2\Workspace\anat-fUntrusted Dir C:\Users\anat-f\Documents\My Squeak[] in MCMczWriter>>writeSnapshot:	Receiver: a MCMczWriter	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		stream: 	a RWBinaryOrTextStream		zip: 	a ZipArchive		infoWriter: 	a MCVersionInfoWriterOrderedCollection(Collection)>>ifEmpty:	Receiver: an OrderedCollection()	Arguments and temporary variables: 		aBlock: 	[closure] in MCMczWriter>>writeSnapshot:	Receiver's instance variables: 		array: 	#(nil nil nil nil nil nil nil nil nil nil)		firstIndex: 	1		lastIndex: 	0MCMczWriter>>writeSnapshot:	Receiver: a MCMczWriter	Arguments and temporary variables: 		aSnapshot: 	a MCSnapshot	Receiver's instance variables: 		stream: 	a RWBinaryOrTextStream		zip: 	a ZipArchive		infoWriter: 	a MCVersionInfoWriterMCMczWriter>>writeDefinitions:	Receiver: a MCMczWriter	Arguments and temporary variables: 		aVersion: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		stream: 	a RWBinaryOrTextStream		zip: 	a ZipArchive		infoWriter: 	a MCVersionInfoWriterMCMczWriter>>writeVersion:	Receiver: a MCMczWriter	Arguments and temporary variables: 		aVersion: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		stream: 	a RWBinaryOrTextStream		zip: 	a ZipArchive		infoWriter: 	a MCVersionInfoWriterMCMczWriter class>>fileOut:on:	Receiver: MCMczWriter	Arguments and temporary variables: 		aVersion: 	a MCVersion(SBEQuintoAnat-AF.1)		aStream: 	a RWBinaryOrTextStream		inst: 	a MCMczWriter	Receiver's instance variables: 		superclass: 	MCWriter		methodDict: 	a MethodDictionary(#addString:at:->(MCMczWriter>>#addString:at: "a CompiledMethod...etc...		format: 	65539		instanceVariables: 	#('zip' 'infoWriter')		organization: 	('accessing' format snapshotWriterClass zip)('initializing' initialize...etc...		subclasses: 	{MCMcdWriter}		name: 	#MCMczWriter		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Monticello-Storing'MCVersion>>fileOutOn:	Receiver: a MCVersion(SBEQuintoAnat-AF.1)	Arguments and temporary variables: 		aStream: 	a RWBinaryOrTextStream	Receiver's instance variables: 		package: 	a MCPackage(SBEQuintoAnat)		info: 	a MCVersionInfo(SBEQuintoAnat-AF.1)		snapshot: 	a MCSnapshot		dependencies: 	an OrderedCollection()[] in MCHttpRepository(MCFileBasedRepository)>>basicStoreVersion:	Receiver: a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)	Arguments and temporary variables: 		aMCVersionOrConfiguration: 	a RWBinaryOrTextStream		s: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		location: 	'http://www.squeaksource.com/SBEQuintoAnat'		user: 	'AFrad'		password: 	'david99'		readerCache: 	nil		indexed: 	nil		webClient: 	WebClient(Connected: http://www.squeaksource.com)MCHttpRepository>>writeStreamForFileNamed:replace:do:	Receiver: a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)	Arguments and temporary variables: 		aString: 	'SBEQuintoAnat-AF.1.mcz'		ignoreBoolean: 	false		aBlock: 	[closure] in MCHttpRepository(MCFileBasedRepository)>>basicStoreVersion:...etc...		stream: 	a RWBinaryOrTextStream		statusLine: 	nil		code: 	nil		response: 	#(nil)	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		location: 	'http://www.squeaksource.com/SBEQuintoAnat'		user: 	'AFrad'		password: 	'david99'		readerCache: 	nil		indexed: 	nil		webClient: 	WebClient(Connected: http://www.squeaksource.com)MCHttpRepository(MCFileBasedRepository)>>writeStreamForFileNamed:do:	Receiver: a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)	Arguments and temporary variables: 		aString: 	'SBEQuintoAnat-AF.1.mcz'		aBlock: 	[closure] in MCHttpRepository(MCFileBasedRepository)>>basicStoreVersion:...etc...	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		location: 	'http://www.squeaksource.com/SBEQuintoAnat'		user: 	'AFrad'		password: 	'david99'		readerCache: 	nil		indexed: 	nil		webClient: 	WebClient(Connected: http://www.squeaksource.com)MCHttpRepository(MCFileBasedRepository)>>basicStoreVersion:	Receiver: a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)	Arguments and temporary variables: 		aMCVersionOrConfiguration: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		location: 	'http://www.squeaksource.com/SBEQuintoAnat'		user: 	'AFrad'		password: 	'david99'		readerCache: 	nil		indexed: 	nil		webClient: 	WebClient(Connected: http://www.squeaksource.com)MCHttpRepository(MCRepository)>>storeVersion:	Receiver: a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)	Arguments and temporary variables: 		aMCVersionOrConfiguration: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		location: 	'http://www.squeaksource.com/SBEQuintoAnat'		user: 	'AFrad'		password: 	'david99'		readerCache: 	nil		indexed: 	nil		webClient: 	WebClient(Connected: http://www.squeaksource.com)[] in MCWorkingCopyBrowser>>saveVersion	Receiver: a MCWorkingCopyBrowser	Arguments and temporary variables: 		repo: 	a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)		v: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Monticello Browser>(31914...etc...		morph: 	nil		label: 	nil		modalProcess: 	nil		modalValue: 	nil		workingCopy: 	a MCWorkingCopy(SBEQuintoAnat)		workingCopyWrapper: 	nil		repository: 	a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)		defaults: 	a Dictionary(a MCWorkingCopy(SBE-Quinto)->nil a MCWorkingCopy(SBE-Qui...etc...BlockClosure>>ensure:	Receiver: [closure] in MCWorkingCopyBrowser>>saveVersion	Arguments and temporary variables: 		aBlock: 	[closure] in CursorWithMask(Cursor)>>showWhile:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	MCWorkingCopyBrowser>>saveVersion		startpc: 	377		numArgs: 	0CursorWithMask(Cursor)>>showWhile:	Receiver: ((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r11111111111111000000000...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in MCWorkingCopyBrowser>>saveVersion		oldcursor: 	((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r1...etc...	Receiver's instance variables: 		bits: 	a Bitmap of length 16		width: 	16		height: 	16		depth: 	1		offset: 	-1@ -1		maskForm: 	Form(16x16x1)MCWorkingCopyBrowser>>saveVersion	Receiver: a MCWorkingCopyBrowser	Arguments and temporary variables: 		repo: 	a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)		v: 	a MCVersion(SBEQuintoAnat-AF.1)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Monticello Browser>(31914...etc...		morph: 	nil		label: 	nil		modalProcess: 	nil		modalValue: 	nil		workingCopy: 	a MCWorkingCopy(SBEQuintoAnat)		workingCopyWrapper: 	nil		repository: 	a MCHttpRepository(http://www.squeaksource.com/SBEQuintoAnat)		defaults: 	a Dictionary(a MCWorkingCopy(SBE-Quinto)->nil a MCWorkingCopy(SBE-Qui...etc...PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction	Receiver: a PluggableButtonMorphPlus(4057683)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	1082@45 corner: 1234@66		owner: 	a PluggablePanelMorph(3133827)		submorphs: 	#()		fullBounds: 	1082@45 corner: 1234@66		color: 	(Color r: 0.42 g: 0.42 b: 0.42)		extension: 	a MorphExtension (2339749) [balloonText]  [other:  (minWidth -> 10) ...etc...		model: 	a MCWorkingCopyBrowser		label: 	'Save'		font: 	a StrikeFont(Darkmap DejaVu Sans7 10)		getStateSelector: 	#buttonSelected		actionSelector: 	#saveVersion		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	(Color r: 0.42 g: 0.42 b: 0.42)		onColor: 	(Color r: 0.011 g: 0.431 b: 0.431)		feedbackColor: 	(Color r: 0.72 g: 0.72 b: 0.72)		showSelectionFeedback: 	nil		allButtons: 	{a PluggableButtonMorphPlus(1885891) . a PluggableButtonMorphPlus(2...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		hoverColor: 	(Color r: 0.621 g: 0.621 b: 0.621)		borderColor: 	(Color r: 0.295 g: 0.295 b: 0.295)		textColor: 	Color white		labelOffset: 	0@0		wantsGradient: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#canSave		updateMap: 	nil		disabledColor: 	Color transparent		disabledTextColor: 	Color lightGrayPluggableButtonMorphPlus>>performAction	Receiver: a PluggableButtonMorphPlus(4057683)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	1082@45 corner: 1234@66		owner: 	a PluggablePanelMorph(3133827)		submorphs: 	#()		fullBounds: 	1082@45 corner: 1234@66		color: 	(Color r: 0.42 g: 0.42 b: 0.42)		extension: 	a MorphExtension (2339749) [balloonText]  [other:  (minWidth -> 10) ...etc...		model: 	a MCWorkingCopyBrowser		label: 	'Save'		font: 	a StrikeFont(Darkmap DejaVu Sans7 10)		getStateSelector: 	#buttonSelected		actionSelector: 	#saveVersion		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	(Color r: 0.42 g: 0.42 b: 0.42)		onColor: 	(Color r: 0.011 g: 0.431 b: 0.431)		feedbackColor: 	(Color r: 0.72 g: 0.72 b: 0.72)		showSelectionFeedback: 	nil		allButtons: 	{a PluggableButtonMorphPlus(1885891) . a PluggableButtonMorphPlus(2...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		hoverColor: 	(Color r: 0.621 g: 0.621 b: 0.621)		borderColor: 	(Color r: 0.295 g: 0.295 b: 0.295)		textColor: 	Color white		labelOffset: 	0@0		wantsGradient: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#canSave		updateMap: 	nil		disabledColor: 	Color transparent		disabledTextColor: 	Color lightGray[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:	Receiver: a PluggableButtonMorphPlus(4057683)	Arguments and temporary variables: 		evt: 	a PluggableButtonMorphPlus(4057683)		m: 	[1158@61 mouseUp ( red ) 3729578]	Receiver's instance variables: 		bounds: 	1082@45 corner: 1234@66		owner: 	a PluggablePanelMorph(3133827)		submorphs: 	#()		fullBounds: 	1082@45 corner: 1234@66		color: 	(Color r: 0.42 g: 0.42 b: 0.42)		extension: 	a MorphExtension (2339749) [balloonText]  [other:  (minWidth -> 10) ...etc...		model: 	a MCWorkingCopyBrowser		label: 	'Save'		font: 	a StrikeFont(Darkmap DejaVu Sans7 10)		getStateSelector: 	#buttonSelected		actionSelector: 	#saveVersion		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	(Color r: 0.42 g: 0.42 b: 0.42)		onColor: 	(Color r: 0.011 g: 0.431 b: 0.431)		feedbackColor: 	(Color r: 0.72 g: 0.72 b: 0.72)		showSelectionFeedback: 	nil		allButtons: 	{a PluggableButtonMorphPlus(1885891) . a PluggableButtonMorphPlus(2...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		hoverColor: 	(Color r: 0.621 g: 0.621 b: 0.621)		borderColor: 	(Color r: 0.295 g: 0.295 b: 0.295)		textColor: 	Color white		labelOffset: 	0@0		wantsGradient: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#canSave		updateMap: 	nil		disabledColor: 	Color transparent		disabledTextColor: 	Color lightGray--- The full stack ---[] in MCMczWriter>>writeSnapshot:OrderedCollection(Collection)>>ifEmpty:MCMczWriter>>writeSnapshot:MCMczWriter>>writeDefinitions:MCMczWriter>>writeVersion:MCMczWriter class>>fileOut:on:MCVersion>>fileOutOn:[] in MCHttpRepository(MCFileBasedRepository)>>basicStoreVersion:MCHttpRepository>>writeStreamForFileNamed:replace:do:MCHttpRepository(MCFileBasedRepository)>>writeStreamForFileNamed:do:MCHttpRepository(MCFileBasedRepository)>>basicStoreVersion:MCHttpRepository(MCRepository)>>storeVersion:[] in MCWorkingCopyBrowser>>saveVersionBlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile:MCWorkingCopyBrowser>>saveVersionPluggableButtonMorphPlus(PluggableButtonMorph)>>performActionPluggableButtonMorphPlus>>performAction[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Array(SequenceableCollection)>>do:PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:PluggableButtonMorphPlus(Morph)>>handleMouseUp:MouseButtonEvent>>sentTo:PluggableButtonMorphPlus(Morph)>>handleEvent:PluggableButtonMorphPlus(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:PluggableButtonMorphPlus(Morph)>>processFocusEvent:using:PluggableButtonMorphPlus(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess