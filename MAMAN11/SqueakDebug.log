SubclassResponsibility: My Employee subclass should have overridden salary:19 March 2019 6:03:25.239 pmVM: Win32 - SmalltalkImage: Squeak5.2 [latest update: #18229]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\Private\Open University\Object Oriented\Squeak\Squeak5.2\Squeak5.2\Workspace\MAMAN11Trusted Dir C:\Private\Open University\Object Oriented\Squeak\Squeak5.2\Squeak5.2\Workspace\MAMAN11\anat-fUntrusted Dir C:\Users\anat-f\Documents\My SqueakEmployee(Object)>>subclassResponsibility	Receiver: an Employee	Arguments and temporary variables: 	Receiver's instance variables: 		empName: 	'George Blogswell'		empNum: 	1021		empSkills: 	a Set()Employee>>salary:	Receiver: an Employee	Arguments and temporary variables: 		aSalary: 	2000	Receiver's instance variables: 		empName: 	'George Blogswell'		empNum: 	1021		empSkills: 	a Set()EmployeeTest>>setUp	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBase[] in [] in EmployeeTest(TestCase)>>runCase	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBaseBlockClosure>>on:do:	Receiver: [closure] in [] in EmployeeTest(TestCase)>>runCase	Arguments and temporary variables: 		exceptionOrExceptionSet: 	an ExceptionSet		handlerAction: 	[closure] in [] in EmployeeTest(TestCase)>>timeout:after:		handlerActive: 	false	Receiver's instance variables: 		outerContext: 	[] in EmployeeTest(TestCase)>>runCase		startpc: 	90		numArgs: 	0[] in EmployeeTest(TestCase)>>timeout:after:	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBaseBlockClosure>>ensure:	Receiver: [closure] in EmployeeTest(TestCase)>>timeout:after:	Arguments and temporary variables: 		aBlock: 	[closure] in EmployeeTest(TestCase)>>timeout:after:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	EmployeeTest(TestCase)>>timeout:after:		startpc: 	257		numArgs: 	0EmployeeTest(TestCase)>>timeout:after:	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 		aBlock: 	[closure] in [] in EmployeeTest(TestCase)>>runCase		seconds: 	5		delay: 	a Delay(5000 msecs; 4990 msecs remaining)		watchdog: 	a Process in [] in Delay>>wait		theProcess: 	#(nil)	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBase[] in EmployeeTest(TestCase)>>runCase	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBaseBlockClosure>>ensure:	Receiver: [closure] in EmployeeTest(TestCase)>>runCase	Arguments and temporary variables: 		aBlock: 	[closure] in EmployeeTest(TestCase)>>runCase		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	EmployeeTest(TestCase)>>runCase		startpc: 	85		numArgs: 	0EmployeeTest(TestCase)>>runCase	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBase[] in EmployeeTest(TestCase)>>debug	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBaseBlockClosure>>ensure:	Receiver: [closure] in EmployeeTest(TestCase)>>debug	Arguments and temporary variables: 		aBlock: 	[closure] in EmployeeTest(TestCase)>>debug		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	EmployeeTest(TestCase)>>debug		startpc: 	102		numArgs: 	0EmployeeTest(TestCase)>>debug	Receiver: EmployeeTest>>#testAdd	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testAdd		timeout: 	nil		e1: 	an Employee		e2: 	nil		e3: 	nil		db: 	an EmployeeDataBase[] in TestRunner>>debugSuite:	Receiver: a TestRunner	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Test Runner in environmen...etc...		categories: 	#(#'KernelTests-Classes' #'KernelTests-Methods' #'KernelTests-Numbe...etc...		categoriesSelected: 	a Set(#'EmployeeTest-Example')		classes: 	{EmployeeTest}		classIndex: 	1		classesSelected: 	a Set(EmployeeTest)		failedList: 	#()		failedSelected: 	nil		errorList: 	{EmployeeTest>>#testAdd}		errorSelected: 	EmployeeTest>>#testAdd		lastUpdate: 	3730471366		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...		previousRun: 	nil		categoryPattern: 	nil		classPattern: 	nil		environment: 	Smalltalk[] in [] in OrderedCollection(Collection)>>do:displayingProgress:every:	Receiver: an OrderedCollection(EmployeeTest>>#testAdd)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		array: 	{EmployeeTest>>#testAdd . nil . nil . nil . nil . nil . nil . nil . nil ...etc...		firstIndex: 	1		lastIndex: 	1OrderedCollection>>do:	Receiver: an OrderedCollection(EmployeeTest>>#testAdd)	Arguments and temporary variables: 		aBlock: 	[closure] in [] in OrderedCollection(Collection)>>do:displayingProgress:every:...etc...		index: 	1	Receiver's instance variables: 		array: 	{EmployeeTest>>#testAdd . nil . nil . nil . nil . nil . nil . nil . nil ...etc...		firstIndex: 	1		lastIndex: 	1[] in OrderedCollection(Collection)>>do:displayingProgress:every:	Receiver: an OrderedCollection(EmployeeTest>>#testAdd)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		array: 	{EmployeeTest>>#testAdd . nil . nil . nil . nil . nil . nil . nil . nil ...etc...		firstIndex: 	1		lastIndex: 	1[] in [] in MorphicUIManager>>displayProgress:at:from:to:during:	Receiver: a MorphicUIManager	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		builderClass: 	MorphicToolBuilder--- The full stack ---Employee(Object)>>subclassResponsibilityEmployee>>salary:EmployeeTest>>setUp[] in [] in EmployeeTest(TestCase)>>runCaseBlockClosure>>on:do:[] in EmployeeTest(TestCase)>>timeout:after:BlockClosure>>ensure:EmployeeTest(TestCase)>>timeout:after:[] in EmployeeTest(TestCase)>>runCaseBlockClosure>>ensure:EmployeeTest(TestCase)>>runCase[] in EmployeeTest(TestCase)>>debugBlockClosure>>ensure:EmployeeTest(TestCase)>>debug[] in TestRunner>>debugSuite:[] in [] in OrderedCollection(Collection)>>do:displayingProgress:every:OrderedCollection>>do:[] in OrderedCollection(Collection)>>do:displayingProgress:every:[] in [] in MorphicUIManager>>displayProgress:at:from:to:during: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockClosure>>on:do:[] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>ensure:MorphicUIManager>>displayProgress:at:from:to:during:ProgressInitiationException>>defaultResumeValueProgressInitiationException(Exception)>>resumeProgressInitiationException>>defaultActionUndefinedObject>>handleSignal:ProgressInitiationException(Exception)>>signalProgressInitiationException>>display:at:from:to:during:ProgressInitiationException class>>display:at:from:to:during:ByteString(String)>>displayProgressAt:from:to:during:ByteString(String)>>displayProgressFrom:to:during:OrderedCollection(Collection)>>do:displayingProgress:every:[] in TestRunner>>basicRunSuite:do:BlockClosure>>ensure:TestRunner>>basicRunSuite:do:TestRunner>>debugSuite:TestRunner>>debug:TestRunner>>errorSelected:PluggableListMorphPlus(PluggableListMorph)>>changeModelSelection:PluggableListMorphPlus(PluggableListMorph)>>mouseUp:PluggableListMorphPlus(Morph)>>handleMouseUp:MouseButtonEvent>>sentTo:PluggableListMorphPlus(Morph)>>handleEvent:PluggableListMorphPlus(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:PluggableListMorphPlus(Morph)>>processFocusEvent:using:PluggableListMorphPlus(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:-- and more not shown --