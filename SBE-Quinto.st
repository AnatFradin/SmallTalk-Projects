Object subclass: #NameOfSubclass	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!SimpleSwitchMorph subclass: #SBECell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBECell commentStamp: 'AF 3/6/2019 19:06' prior: 0!New class SBECell!]style[(17)c190062062!!SBECell methodsFor: 'accessing' stamp: 'AF 3/6/2019 20:45'!mouseAction: aBlock^ mouseAction := aBlock! !!SBECell methodsFor: 'initialization' stamp: 'AF 3/6/2019 19:11'!initializesuper initialize.self label: ''.self borderWidth: 2.bounds := 0@0 corner: 16@16.offColor := Color paleYellow.onColor := Color paleBlue darker.self useSquareCorners.self turnOff! !!SBECell methodsFor: 'event handling' stamp: 'AF 3/6/2019 20:13'!mouseUp: anEvent 	mouseAction value! !BorderedMorph subclass: #SBEGame	instanceVariableNames: 'n sampleSell width height cells'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBEGame commentStamp: 'AF 3/6/2019 19:49' prior: 0!Game border class!]style[(17)c190062062!!SBEGame methodsFor: 'initialization' stamp: 'AF 3/6/2019 20:00'!cellsPerSide"The number of cells along each side of the game"^ 10! !!SBEGame methodsFor: 'initialization' stamp: 'AF 3/6/2019 20:40'!initialize	| sampleCell wight height n |	super initialize.	n := self cellsPerSide.	sampleCell := SBECell new.	wight := sampleCell width.	height := sampleCell height.	self		bounds: (5 @ 5 extent: wight * n @ (height * n) + (2 * self borderWidth)).	cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].! !!SBEGame methodsFor: 'initialization' stamp: 'AF 3/6/2019 20:51'!newCellAt: i at: j"Create a cell for position (i,j) and add it to my on--screenrepresentation at the appropriate screen position. Answer the new cell"| c origin |c := SBECell new.origin := self innerBounds origin.self addMorph: c.c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.c mouseAction: [self toggleNeighboursOfCellAt: i at: j].^ c.! !!SBEGame methodsFor: 'Game Logic' stamp: 'AF 3/6/2019 20:46'!toggleNeighboursOfCellAt: i at: j 	i > 1		ifTrue: [(cells at: i - 1 at: j) toggleState].	i < self cellsPerSide		ifTrue: [(cells at: i + 1 at: j) toggleState].	j > 1		ifTrue: [(cells at: i at: j - 1) toggleState].	j < self cellsPerSide		ifTrue: [(cells at: i at: j + 1) toggleState]! !